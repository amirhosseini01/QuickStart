@page "/Login"
@inject ApiClient Client

<div class="container">
    
    <EditForm Model="@this" class="form-horizontal py-5" OnValidSubmit="@LoginUser">
        <DataAnnotationsValidator />
        <div class="mb-3">
            <label for="username" class="form-label">نام کاربری</label>
            <InputText id="username" class="form-control" @bind-Value="Username" />
            <ValidationMessage For="@(() => Username)" />
        </div>
        <div class="mb-3">
            <label for="password" class="form-label">رمز عبور</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="Password" />
            <ValidationMessage For="@(() => Password)" />
        </div>
        <div>
            <button class="btn btn-primary">ورود</button>
            <button type="button" class="btn btn-secondary" @onclick="@Create">ایجاد حساب</button>
        </div>
    </EditForm>
</div>

<div class="form-horizontal">
    @foreach (var provider in SocialProviders)
    {
        <a class="btn btn-secondary m-1" role="button" href="auth/login/@provider">@provider</a>
    }
</div>

@if (!string.IsNullOrEmpty(alertMessage))
    {
        <div class="alert alert-danger">@alertMessage</div>
    }



@code {
    string? alertMessage;

    [Required]
    [StringLength(15)] 
    public string? Username { get; set; }

    [Required] 
    [StringLength(32, MinimumLength = 6, ErrorMessage = "کلمه عبور باید حداقل 6 کاراکتر داشته باشد.")]
    [RegularExpression("^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z])(?=.*[^a-zA-Z\\d]).*$", 
        MatchTimeoutInMilliseconds = 1000,
        ErrorMessage = "The password must contain a lower-case letter, an upper-case letter, a digit and a special character.")]
    public string? Password { get; set; }

    [Parameter] 
    public EventCallback<string> OnLoggedIn { get; set; }

    [Parameter]
    public string[] SocialProviders { get; set; } = Array.Empty<string>();

    async Task LoginUser()
    {
        alertMessage = null;
        if (await Client.LoginAsync(Username, Password))
        {
            await OnLoggedIn.InvokeAsync(Username);
        }
        else
        {
            alertMessage = "ورود ناموفق.";
        }
    }

    async Task Create()
    {
        alertMessage = null;
        if (await Client.CreateUserAsync(Username, Password))
        {
            await OnLoggedIn.InvokeAsync(Username);
        }
        else
        {
            alertMessage = "خطا در ساخت حساب کاربری.";
        }
    }
}
